#!/usr/bin/env python3
# zbdev pretends to be a Zigbee device
# the local interface should be running the NIC.py firmware so that
# it is hexdumping the raw packets that are being received

import os
import sys
import serial
import threading
import readline
import time
from select import select
from binascii import unhexlify, hexlify
from struct import pack
from ZbPy import Device

# re-open stdout as binary
#stdout = os.fdopen(sys.stdout.fileno(), "wb")
#stderr = os.fdopen(sys.stderr.fileno(), "wb")
from sys import stdout, stderr

device = "/dev/ttyACM0"
speed = 115200
dev = serial.Serial(device, speed, timeout=0.1)

# send the commands to reboot and load the NIC firmware
dev.write(b"\x03\x03\x03")
time.sleep(0.2)
dev.write(b"reset()\r") # why \r?
time.sleep(0.5)
dev.write(b"import NIC\r")

#stderr.write(b"reset\n")

def process_line(line):	
	try:
		data = bytearray(unhexlify(line))
		return data
	except Exception as e:
		print(str(e) + ": " + str(line))
		return None

line = b''
def process_serial():
	global line
	c = dev.read(1)
	if c is None:
		return
	if c == b'\r':
		return

	#stderr.write(c)

	if (b'0' <= c and c <= b'9') \
	or (b'a' <= c and c <= b'f'):
		line += c
		return

	if c == b'\n' and line != b'':
		pkt = process_line(line)
		line = b''
		return pkt

	# either a line was processed, or a non-hex char
	# was received, in either case restart the line
	line = b''
	return

last_status = 0

zbdev = Device.IEEEDevice(
	tx = lambda b: device.write(hexlify(b) + b"\n"),
	mac = b'12345678',
)


while True:
	now = time.time()
	if now - last_status > 0.5:
		print(now)
		last_status = now

	zbdev.rx(process_serial())

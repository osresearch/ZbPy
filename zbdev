#!/usr/bin/env python3
# zbdev pretends to be a Zigbee device
# the local interface should be running the NIC.py firmware so that
# it is hexdumping the raw packets that are being received

import os
import sys
import serial
import threading
import readline
import time
from select import select
from binascii import unhexlify, hexlify
from struct import pack
from ZbPy import Device

# re-open stdout as binary
#stdout = os.fdopen(sys.stdout.fileno(), "wb")
#stderr = os.fdopen(sys.stderr.fileno(), "wb")
from sys import stdout, stderr

device = "/dev/ttyACM0"
speed = 115200
serial_dev = serial.Serial(device, speed, timeout=0.1)

# send the commands to reboot and load the NIC firmware
serial_dev.write(b"\x03\x03\x03")
time.sleep(0.2)
serial_dev.write(b"reset()\r") # why \r?
time.sleep(0.5)
serial_dev.write(b"import NIC\r")

#stderr.write(b"reset\n")

def process_line(line):	
	try:
		data = bytearray(unhexlify(line))
		return data
	except Exception as e:
		print(str(e) + ": " + str(line))
		return None

line = b''
def process_serial():
	global line
	c = serial_dev.read(1)
	if c is None:
		return
	if c == b'\r':
		return

	#stderr.write(c)

	if (b'0' <= c and c <= b'9') \
	or (b'a' <= c and c <= b'f'):
		line += c
		return

	if c == b'\n' and line != b'':
		pkt = process_line(line)
		line = b''
		return pkt

	# either a line was processed, or a non-hex char
	# was received, in either case restart the line
	line = b''
	return

last_status = 0

addr = [
	b'abcdef00',	# mac
	None,		# nwk
	None,		# pan
]

zbdev = Device.IEEEDevice(
	tx = lambda b: serial_dev.write(hexlify(b) + b"\n"),
	addr = addr,
)


boot_time = time.time()
last_join = None

while not zbdev.join_failed:
	zbdev.rx(process_serial())

	if zbdev.tx_fail != 0:
		print("\n\n\n!!!!! TX FAIL")
		zbdev.tx_fail = 0

	now = time.time()
	if now - last_status < 0.5:
		continue

	print(now)
	last_status = now

	if now - boot_time > 2 and addr[2] is None:
		# no PAN set: send a beacon request
		print("---- BEACON REQUEST ----")
		zbdev.beacon()
		last_join = now
	elif last_join and now - last_join > 2 and addr[2] is not None and addr[1] is None and zbdev.pending_seq is None:
		# PAN is set, but not NWK: send a join request
		print("\n\n\n---- JOIN REQUEST ----")
		zbdev.join()
		last_join = now


